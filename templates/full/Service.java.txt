package ${javaPackage}.service;


import ${javaPackage}.model.entity.${className};
import ${javaPackage}.model.enums.*;
import ${javaPackage}.repo.${className}Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.annotation.*;
import java.util.*;
import org.springframework.transaction.annotation.*;


/**
 * <p>Title         : ${className}Service
 * <p>Project       : ${javaProjectName} : ${projectDescription}
 * <p>Description   : Service class for ${className}. ${classDescription}
 *
 * @author Kasun Madurasinghe
 * @version 1.0
 */
@Service
public class ${className}Service {
    @Autowired
    ${className}Repository ${classVariableName}Repository;

    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.SUPPORTS, readOnly = true)
    public List<${className}> get${className}s(){
        return ${classVariableName}Repository.findAll();
    }

    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.SUPPORTS, readOnly = true)
    public Optional<${className}> getByID(Long id){
         return ${classVariableName}Repository.findById(id);
    }

    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, timeout = 500, readOnly = false)
    public long save${className}(${className} ${classVariableName}){
        if(${classVariableName} == null || !${classVariableName}.isValid() ) return -1;
        ${className} saved${className} = ${classVariableName}Repository.saveAndFlush(${classVariableName});
        if(saved${className} != null) return saved${className}.getId();
        return -2;
    }

    @Transactional(isolation = Isolation.SERIALIZABLE, propagation = Propagation.REQUIRED, timeout = 500, readOnly = false)
    public int deleteByID(long ${classVariableName}ID){
        ${classVariableName}Repository.deleteById(${classVariableName}ID);
        return 1;
    }

    @PostConstruct
    public void initDB(){

    }
}
