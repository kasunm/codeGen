package ${javaPackage}.test.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import ${javaPackage}.MainApplication;
import ${javaPackage}.controller.${className}Controller;
import ${javaPackage}.error.CustomizedResponseEntityExceptionHandler;
import ${javaPackage}.model.dto.${className}DTO;
import ${javaPackage}.model.entity.*;
import ${javaPackage}.model.enums.*;
import ${javaPackage}.repo.*;
import ${javaPackage}.service.Main${className}Service;
import org.hamcrest.Matcher;
import org.hamcrest.collection.IsCollectionWithSize;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;


import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


import static org.hamcrest.Matchers.greaterThan;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;



/**
 * <p>Title         : ${className} API integration Test
 * <p>Project       : ${javaProjectName} : ${projectDescription}
 * <p>Description   : Integration test class for ${className}. ${classDescription}
 * This will test basic REST API calls with test profile
 *
 * @author Kasun Madurasinghe
 * @version 1.0
 */


@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {MainApplication.class, CustomizedResponseEntityExceptionHandler.class, ${className}Controller.class})
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class ${className}APITest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private Main${className}Service ${classVariableName}Service;

    @Autowired
    private ObjectMapper objectMapper;
    //No bar
    @Autowired
    private ${className}Repository ${classVariableName}Repository;
    //No war
    private List<${className}> ${classVariableName}s = new ArrayList<>();

     ${dependantBeansHeader}


    private final ModelMapper modelMapper = new ModelMapper();

    public ${className}APITest(){


    }

    @Before
    public void initData(){
        ${dependantBeans}
        ${classVariableName}s.add(${beanID0});
		${classVariableName}s.add(${beanID01});
		${classVariableName}s.add(${beanID02});
        try {
        ${classVariableName}Repository.deleteAll();
        } catch (Throwable e) {
            //Ignore any constraint violations, delete rest
        }
        ${className} saved${className} = ${classVariableName}Repository.save(${classVariableName}s.get(0));
        Assert.assertNotNull(saved${className});
        Assert.assertTrue(saved${className}.getId() > 0);
        ${classVariableName}s.get(0).setId(saved${className}.getId());
        saved${className} = ${classVariableName}Repository.save(${classVariableName}s.get(1));
        Assert.assertNotNull(saved${className});
        Assert.assertTrue(saved${className}.getId() > 0);
        ${classVariableName}s.get(1).setId(saved${className}.getId());
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);

    }

    @Test
    public void verifyGet${className}ByIDPresent() throws Exception{
        mockMvc.perform(get("/${classURL}/{id}",${classVariableName}s.get(0).getId()).accept(MediaType.APPLICATION_JSON)).andExpect(status().isAccepted()).
                andDo(print()).
        andExpect(jsonPath("$.id").value(${classVariableName}s.get(0).getId())); //Match attribute ID
    }

    @Test
    public void verifyGet${className}ByIDNotPresent() throws Exception{
        mockMvc.perform(get("/${classURL}/{id}",111).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound()); //Not found ID

    }


    @Test
    public void verifyGet${className}ByIDZero() throws Exception{
        mockMvc.perform(get("/${classURL}/{id}",0L).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest()); //Bad request

    }

    @Test
    public void verifyGetAll${className}s() throws Exception{
        mockMvc.perform(get("/${classURL}").accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isAccepted()).andDo(print()).andExpect(jsonPath("$", IsCollectionWithSize.hasSize(greaterThan(1))));

    }

    @Test
    public void verifySave${className}Success() throws Exception{
        mockMvc.perform(MockMvcRequestBuilders.post("/${classURL}")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(getDTO(${classVariableName}s.get(2))))
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated());
    }

    @Test
    public void verifySave${className}ExistingSuccess() throws Exception{
        mockMvc.perform(MockMvcRequestBuilders.post("/${classURL}")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(getDTO(${classVariableName}s.get(1))))
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated())
                .andExpect(header().stringValues("location", "/${classURL}/" + ${classVariableName}s.get(1).getId()));
    }


    @Test
    public void verifySave${className}FailValidation() throws Exception{
        ${className} invalid =  ${beanFailValidation};
        mockMvc.perform(MockMvcRequestBuilders.post("/${classURL}")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(getDTO(invalid)))
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest());
    }

    @Test
    public void verifySave${className}ExistingNotFound() throws Exception{
        ${className} nonExisting =  ${beanID5};
        mockMvc.perform(MockMvcRequestBuilders.post("/${classURL}")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(getDTO(nonExisting)))
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isNotFound());
    }


    @Test
    public void verifyDeleteByIDSuccess() throws Exception{
        mockMvc.perform(MockMvcRequestBuilders.delete("/${classURL}/{id}", ${classVariableName}s.get(0).getId()).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isAccepted()).andDo(print());
    }


    @Test
    public void verifyDeleteByIDNonExisting() throws Exception{
        mockMvc.perform(MockMvcRequestBuilders.delete("/${classURL}/{id}", 111L).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound()) ;
    }


    @Test
    public void verifyDeleteByIDZero() throws Exception{
        mockMvc.perform(MockMvcRequestBuilders.delete("/${classURL}/{id}", 0L).accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest()) ;
    }


    public  String asJsonString(final Object obj) {
        try {
            return objectMapper.writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private ${className}DTO getDTO(${className} ${classVariableName}){
        return modelMapper.map(${classVariableName}, ${className}DTO.class);
    }

}
