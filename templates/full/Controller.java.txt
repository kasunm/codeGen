package ${javaPackage}.controller;

import ${javaPackage}.model.dto.${className}DTO;
import ${javaPackage}.model.entity.*;
import ${javaPackage}.model.enums.*;
import ${javaPackage}.service.*;
import com.google.gson.Gson;
import io.swagger.annotations.Api;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.util.Assert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.net.URI;
import javax.persistence.PersistenceException;
import javax.validation.Valid;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.time.*;
import java.util.stream.Collectors;
/**
 * <p>Title         : ${className}Controller
 * <p>Project       : ${javaProjectName} : ${projectDescription}
 * <p>Description   : Controller class for ${className}. ${classDescription}
 *
 * @author Kasun Madurasinghe
 * @version 1.0
 */
@Api(basePath = "/${classURL}", value = "${className}Controller", description = "All services related to ${className}Controller", produces = "application/json")
@RestController
@CrossOrigin
@RequestMapping("/${classURL}")
public class ${className}Controller {

    private final ${className}Service ${classVariableName}Service;
    private final ModelMapper modelMapper = new ModelMapper();
    private final Logger logger = LoggerFactory.getLogger(${className}Controller.class);

${dependantVariableService}

    public ${className}Controller(${className}Service ${classVariableName}Service ${dependantConstructorService}){
        this.${classVariableName}Service = ${classVariableName}Service;
${dependantConstructorAssign}
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STANDARD);
    }

    /** ------------- Main service method ------------- */

    /**
     * get all ${classVariableName}s
     * @return ResponseEntity<List<${className}DTO>>
     */
    @GetMapping(path = "")
    public ResponseEntity<?> get${className}s(){
        logger.debug("Request to get all ${classNameDisplay}s");
        List<${className}DTO> ${classVariableName}s = ${classVariableName}Service.get${className}s().stream().map(this::convertToDTO).collect(Collectors.toList());
        if(${classVariableName}s == null || ${classVariableName}s.size() < 1) throw new ResourceNotFoundException("Unable to find any ${classNameDisplay}s");
        return new ResponseEntity(${classVariableName}s, HttpStatus.ACCEPTED);
    }

    /**
     * Get a specific ${classVariableName} by id
     * @param id Long
     * @return ResponseEntity<${className}DTO>
     */
    @GetMapping(path = "{id}")
    public ResponseEntity<${className}DTO> get${className}s(@PathVariable Long id) {
        logger.debug("Request to get a ${className} by id");
        if(id == null || id <= 0) throw new IllegalArgumentException("Expects a valid id value > 0");
        Optional<${className}> ${classVariableName} = ${classVariableName}Service.getByID(id);
        if(${classVariableName} != null && ${classVariableName}.isPresent()) return new ResponseEntity(convertToDTO(${classVariableName}.get()) , HttpStatus.ACCEPTED);
        throw new ResourceNotFoundException("Unable to find any ${classNameDisplay} with id " + id);
    }


    /**
     * Persist ${classVariableName}. if id > 0 is present expects valid ${classVariableName} object already present, and update it by
     * replacing values. Otherwise simply creates a new ${classVariableName} and id is returned
     * @param ${classVariableName} ${className}DTO
     * @return ResponseEntity<Long>
     * @throws Exception
     */
    @PostMapping(path = "")
    public ResponseEntity<${className}DTO> save${className}(@RequestBody @Valid ${className}DTO ${classVariableName}) throws Exception{
        logger.debug("Request to save ${classNameDisplay}");
        ${className} existing${className} = new ${className}();
        if(${classVariableName}.getId() != null && ${classVariableName}.getId() > 0) {
            //Updating existing ${classVariableName} - Check item with matching ID present
            Optional<${className}> saved${className} = ${classVariableName}Service.getByID(${classVariableName}.getId());
            if(saved${className} != null && saved${className}.isPresent()) existing${className} = saved${className}.get();
            else throw new ResourceNotFoundException("In order to update ${classNameDisplay} " + ${classVariableName}.getId() + ", existing ${classNameDisplay} must be available with same ID");
        }

        //In case not all persistent attributes not present in update DTO
        ${className} save${className} = copyTo${className}(${classVariableName}, existing${className});
        ${className} saved${className} = ${classVariableName}Service.save${className}(save${className});
        if(saved${className}.getId() != null && saved${className}.getId() > 0){
            logger.info("Saved ${classNameDisplay} with id " + save${className}.getId());
            ${className}DTO saved${className}DTo = convertToDTO(saved${className});
            return  ResponseEntity.created (new URI("/${classURL}/" + saved${className}.getId())).body(saved${className}DTo);
        }
        else{
            throw new PersistenceException("${className} not persisted: " + new Gson().toJson(saved${className}));
        }
    }

   /**
     * Delete a ${classVariableName} by id
     * @param id Long
     * @return ResponseEntity<Long>
     */
    @DeleteMapping("{id}")
    public ResponseEntity<Long> delete(@PathVariable("id") Long id) {
        logger.debug("Request to delete ${className} with id " + id);
        if(id == null || id == 0)  throw new IllegalArgumentException("Expects a valid id value > 0");
        Optional<${className}> ${classVariableName} = ${classVariableName}Service.getByID(id);
        if(${classVariableName} == null || !${classVariableName}.isPresent()) throw new ResourceNotFoundException("In order to delete  ${classNameDisplay} " + id + ", existing  ${classNameDisplay} must be available with same ID");
        ${classVariableName}Service.deleteByID(id);
        return new ResponseEntity<Long>(id,new HttpHeaders(), HttpStatus.ACCEPTED);
    }

    /** ------------- Search methods ------------- */

${controllerSearch}

    /** ------------- Private supportive methods ------------- */

    private ${className}DTO convertToDTO(${className} ${classVariableName}){
        return modelMapper.map(${classVariableName}, ${className}DTO.class);
    }

     private List<${className}DTO> getDTOs(List<${className}> ${classVariableName}s){
           if(${classVariableName}s == null) return null;
           List<${className}DTO> dtoList = new ArrayList<${className}DTO>(${classVariableName}s.size());
           for(${className} ${classVariableName}: ${classVariableName}s){
               ${className}DTO dto = convertToDTO(${classVariableName});
               dtoList.add(dto);
           }
           return dtoList;
        }

    private ${className} copyTo${className}(${className}DTO ${classVariableName}DTO, ${className} ${classVariableName}){
${dtoMapping}
         modelMapper.map(${classVariableName}DTO, ${classVariableName});
          return ${classVariableName};
    }

}
