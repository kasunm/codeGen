package ${javaPackage}.service;


import ${javaPackage}.model.entity.${className};
import ${javaPackage}.model.enums.*;
import ${javaPackage}.repo.${className}Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.annotation.*;
import java.util.*;
import org.springframework.transaction.annotation.*;
import org.springframework.util.Assert;



/**
 * <p>Title         : ${className}Service
 * <p>Project       : ${javaProjectName} : ${projectDescription}
 * <p>Description   : Service class for ${className}. ${classDescription}
 *
 * @author Kasun Madurasinghe
 * @version 1.0
 */
@Service
public class Main${className}Service implements ${className}Service{
    @Autowired
    ${className}Repository ${classVariableName}Repository;

    /**
     * Get all ${classVariableName}s
     * @return List<${className}>
     */
    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.SUPPORTS, readOnly = true)
    public List<${className}> get${className}s(){
        return ${classVariableName}Repository.findAll();
    }

    /**
     * Get a specific ${classVariableName} by id
     * @param id Long
     * @return Optional<${className}>
     */
    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.SUPPORTS, readOnly = true)
    public Optional<${className}> getByID(Long id){
         return ${classVariableName}Repository.findById(id);
    }

    /**
     * Save ${classVariableName} and set id to passed ${classVariableName}
     * @param ${classVariableName} ${className}
     * @return ServiceStatus
     */
    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, timeout = 500, readOnly = false)
    public ${className} save${className}(${className} ${classVariableName}){
        Assert.notNull(${classVariableName}, "${classNameDisplay} parameter expected");
        Assert.isTrue(${classVariableName}.isValid(), "Valid ${classNameDisplay} is expected");
        ${className} saved${className} = ${classVariableName}Repository.saveAndFlush(${classVariableName});
        if(saved${className} != null && saved${className}.getId() != null && saved${className}.getId() > 0) {
            ${classVariableName}.setId(saved${className}.getId());
        }
        return ${classVariableName};
    }

    /**
     * Delete a ${classVariableName} by ID
     * @param ${classVariableName}ID long
     * @return ServiceStatus
     */
    @Transactional(isolation = Isolation.SERIALIZABLE, propagation = Propagation.REQUIRED, timeout = 500, readOnly = false)
    public ServiceStatus deleteByID(long ${classVariableName}ID){
        ${classVariableName}Repository.deleteById(${classVariableName}ID);
         return ServiceStatus.SUCCESS;
    }

      /** ------------- Search methods ------------- */

    ${serviceSearch}


    @PostConstruct
    public void initDB(){

    }
}
